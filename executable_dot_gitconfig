[user]
	name = Brian Gray
	email = 638937+brianmgray@users.noreply.github.com
[push]
	default = tracking
[credential]
	helper = osxkeychain

[alias]
  # convenience    
  m = checkout main
  ms = checkout master

  # shortcuts
  co = checkout
  ci = commit
  ca = commit --amend
  cm = commit -m
  cam = commit -am
  caa = commit -a --amend
  st = status
  br = branch
  r = rebase
  rc = rebase --continue
  ra = rebase --abort
  cp = cherry-pick
  cpc = cherry-pick --continue
  cpa = cherry-pick --abort
  bs = bisect start
  bg = bisect good
  bb = bisect bad
  br = bisect reset

  # fugu
  cbr = "!git branch | egrep '^\\s*(bp|mike|jasonL|peitong)/' | xargs -I {} sh -c 'echo Deleting branch: {}; git branch -D {}'"

  # useful
  cog = "!git_cog() { git co $(git branch | grep "$1" | head -n 1); }; git_cog"
  rfp = "!f() { set -x; git rebase --onto "$1" HEAD~$(( $2 + 1 )); }; f"
  addg = "!f() { git ls-files | grep \"$1\" | xargs git add; git st; }; f"
  exg = "!f() { pattern=\"$1\"; shift; cmd=\"$1\"; shift; git ls-files | grep -E \"$pattern\" | xargs -r git $cmd \"$@\"; git st;}; f"
  d = "!f() { git diff "$@" -- . :^pnpm-lock.yaml; }; f"
  dc = d --cached
  dp = d HEAD~1 HEAD
  dp2 = d HEAD~2 HEAD~1
  rtrack = !git checkout --track -b $1 origin/$1
  unstage = restore --staged
  unchange = restore
  reseto = !git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)
  # reseto = "!git_reseto() { git reset --hard origin/$(git rev-parse --abbrev-ref HEAD); }; git_reseto"
  fa = !git config --list | grep alias | grep
  curbranch = name-rev --name-only HEAD
  find = !git branch -r | grep
  type = cat-file -t
  dump = cat-file -p
  undo = reset --soft HEAD~1
  adda = !git add -A . && git status
  a- = !git add -A . && git status	
  lreset = !git reset HEAD $1 && git checkout -- $1 && git clean -fd
  pushall = !git push --all origin && git push --follow-tags
  pushr = push -u origin HEAD    
  pushf = push --force-with-lease
  tbd = for-each-ref --sort=taggerdate --format '%(refname) %(taggerdate)' refs/tags
  rdel = push origin --delete
  remote-merged = !git-remote-merged-branches
  remote-notmerged = !git-remote-notmerged-branches
  rgrep = !git branch -r | grep

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  # Pretty log output
  hist = log --graph --pretty=format:'%Cred%h%Creset %s%C(yellow)%d%Creset %Cgreen(%cr)%Creset [%an]' --abbrev-commit --date=relative

[core]
        excludesfile = ~/.gitignore.global
	preloadindex = true
	fscache = true
	editor = /usr/bin/vim
[color]
        branch = auto
        diff = auto
        status = auto
[color "branch"]
        current = yellow reverse
        local = yellow
        remote = green
[color "diff"]
        meta = yellow bold
        frag = magenta bold
        old = red bold
        new = green bold
[color "status"]
        added = yellow
        changed = green
        untracked = cyan
[merge]
	tool = opendiff
[diff]
	tool = opendiff
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[init]
	defaultBranch = main
[pager]
	branch = false
[rerere]
        enabled = true

[pull]
	rebase = true
# [merge "bazel-lockfile-merge"]
# 	name = Merge driver for the Bazel lockfile (MODULE.bazel.lock)
# 	driver = "jq -s '# Merges an arbitrary number of MODULE.bazel.lock files.\n#\n# Input: an array of MODULE.bazel.lock JSON objects (as produced by `jq -s`).\n# Output: a single MODULE.bazel.lock JSON object.\n#\n# This script assumes that all files are valid JSON and have a numeric\n# \"lockFileVersion\" field. It will not fail on any such files, but only\n# preserves information for files with a version of 10 or higher.\n#\n# The first file is considered to be the base when deciding which values to\n# keep in case of conflicts.\n\n# Like unique, but preserves the order of the first occurrence of each element.\ndef stable_unique:\n  reduce .[] as $item ([]; if index($item) == null then . + [$item] else . end);\n\n# Given an array of objects, shallowly merges the result of applying f to each\n# object into a single object, with a few special properties:\n# 1. Values are uniquified before merging and then merged with last-wins\n#    semantics. Assuming that the first value is the base, this ensures that\n#    later occurrences of the base value do not override other values. For\n#    example, when this is called with B A1 A2 and A1 contains changes to a\n#    field but A2 does not (compared to B), the changes in A1 will be preserved.\n# 2. Object keys on the top level are sorted lexicographically after merging,\n#    but are additionally split on \":\". This ensures that module extension IDs,\n#    which start with labels, sort as strings in the same way as they due as\n#    structured objects in Bazel (that is, //python/extensions:python.bzl\n#    sorts before //python/extensions/private:internal_deps.bzl).\ndef shallow_merge(f):\n  map(f) | stable_unique | add | to_entries | sort_by(.key | split(\":\")) | from_entries;\n\n(\n    # Ignore all MODULE.bazel.lock files that do not have the maximum\n    # lockFileVersion.\n    (map(.lockFileVersion) | max) as $maxVersion\n    | map(select(.lockFileVersion == $maxVersion))\n    | {\n        lockFileVersion: $maxVersion,\n        registryFileHashes: shallow_merge(.registryFileHashes),\n        selectedYankedVersions: shallow_merge(.selectedYankedVersions),\n        # Group extension results by extension ID across all lockfiles with\n        # shallowly merged factors map, then shallowly merge the results.\n        moduleExtensions:  (map(.moduleExtensions | to_entries)\n                           | flatten\n                           | group_by(.key)\n                           | shallow_merge({(.[0].key): shallow_merge(.value)}))\n    }\n)? //\n    # We get here if the lockfiles with the highest lockFileVersion could not be\n    # processed, for example because all lockfiles have lockFileVersion < 10.\n    # In this case Bazel 7.2.0+ would ignore all lockfiles, so we might as well\n    # return the first lockfile for the proper \"mismatched version\" error\n    # message.\n    .[0]' -- %O %A %B > %A.jq_tmp && mv %A.jq_tmp %A"
